{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "75a59dbf-59a5-482f-8872-d0d1c9d7b05e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import torchvision.transforms as transforms\n",
    "import torchvision.datasets as datasets\n",
    "import torchvision.models as models\n",
    "from torch.utils.data import DataLoader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d3acd3f5-d532-4ee2-b8dd-b50dfe7f9dca",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set device\n",
    "if torch.backends.mps.is_available():\n",
    "    device = torch.device(\"mps\")  # Use MPS for Apple Silicon\n",
    "elif torch.cuda.is_available():\n",
    "    device = torch.device(\"cuda\")  # Use CUDA for Nvidia GPUs\n",
    "else:\n",
    "    device = torch.device(\"cpu\")  # Default to CPU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "011be64f-7d37-4815-a43b-d26e95d1f1f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define data directories\n",
    "data_dir = \"./chest_xray/\"\n",
    "train_dir = os.path.join(data_dir, \"train\")\n",
    "val_dir = os.path.join(data_dir, \"val\")\n",
    "test_dir = os.path.join(data_dir, \"test\")\n",
    "\n",
    "# Define transforms\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224, 224)),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.5], std=[0.5])\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4bd7ab26-41ef-4166-9788-6079c8c6adc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load datasets\n",
    "train_dataset = datasets.ImageFolder(root=train_dir, transform=transform)\n",
    "val_dataset = datasets.ImageFolder(root=val_dir, transform=transform)\n",
    "test_dataset = datasets.ImageFolder(root=test_dir, transform=transform)\n",
    "\n",
    "# Define data loaders\n",
    "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\n",
    "test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8f351b0d-4746-467d-9bb6-e562b7d8922f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/devanshkochar/anaconda3/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "/Users/devanshkochar/anaconda3/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n"
     ]
    }
   ],
   "source": [
    "# Load pre-trained model and modify\n",
    "def get_model():\n",
    "    model = models.resnet18(pretrained=True)\n",
    "    num_ftrs = model.fc.in_features\n",
    "    model.fc = nn.Linear(num_ftrs, 2)  # Binary classification (Pneumonia/Normal)\n",
    "    return model\n",
    "\n",
    "model = get_model().to(device)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ba035da0-c888-4018-86d5-eca0ae79e826",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define loss and optimizer\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ddc03580-afaa-48ef-bae6-b17f92b21123",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Training function\n",
    "def train_model(model, train_loader, val_loader, epochs=10):\n",
    "    best_acc = 0.0\n",
    "    for epoch in range(epochs):\n",
    "        model.train()\n",
    "        running_loss = 0.0\n",
    "        correct = 0\n",
    "        total = 0\n",
    "        for images, labels in train_loader:\n",
    "            images, labels = images.to(device), labels.to(device)\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(images)\n",
    "            loss = criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            running_loss += loss.item()\n",
    "            _, predicted = torch.max(outputs, 1)\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted == labels).sum().item()\n",
    "        train_acc = correct / total\n",
    "        \n",
    "        model.eval()\n",
    "        val_correct = 0\n",
    "        val_total = 0\n",
    "        with torch.no_grad():\n",
    "            for images, labels in val_loader:\n",
    "                images, labels = images.to(device), labels.to(device)\n",
    "                outputs = model(images)\n",
    "                _, predicted = torch.max(outputs, 1)\n",
    "                val_total += labels.size(0)\n",
    "                val_correct += (predicted == labels).sum().item()\n",
    "        val_acc = val_correct / val_total\n",
    "        \n",
    "        print(f\"Epoch {epoch+1}/{epochs}, Loss: {running_loss:.4f}, Train Acc: {train_acc:.4f}, Val Acc: {val_acc:.4f}\")\n",
    "        \n",
    "        if val_acc > best_acc:\n",
    "            best_acc = val_acc\n",
    "            torch.save(model.state_dict(), \"best_model.pth\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5a307026-d324-4a43-94d5-2922e5095463",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10, Loss: 20.9805, Train Acc: 0.9534, Val Acc: 0.5000\n",
      "Epoch 2/10, Loss: 10.4529, Train Acc: 0.9757, Val Acc: 0.6250\n",
      "Epoch 3/10, Loss: 7.8020, Train Acc: 0.9814, Val Acc: 0.8750\n",
      "Epoch 4/10, Loss: 7.4560, Train Acc: 0.9808, Val Acc: 0.9375\n",
      "Epoch 5/10, Loss: 5.0456, Train Acc: 0.9893, Val Acc: 1.0000\n",
      "Epoch 6/10, Loss: 3.4302, Train Acc: 0.9937, Val Acc: 0.8750\n",
      "Epoch 7/10, Loss: 4.8849, Train Acc: 0.9896, Val Acc: 1.0000\n",
      "Epoch 8/10, Loss: 0.9413, Train Acc: 0.9983, Val Acc: 1.0000\n",
      "Epoch 9/10, Loss: 4.5251, Train Acc: 0.9912, Val Acc: 0.8125\n",
      "Epoch 10/10, Loss: 3.1335, Train Acc: 0.9933, Val Acc: 0.9375\n"
     ]
    }
   ],
   "source": [
    "# Train the model\n",
    "train_model(model, train_loader, val_loader, epochs=10)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "01b581fb-a612-4f3d-a226-278d50dd0e0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluate the model\n",
    "def evaluate_model(model, test_loader):\n",
    "    model.load_state_dict(torch.load(\"best_model.pth\"))\n",
    "    model.eval()\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    with torch.no_grad():\n",
    "        for images, labels in test_loader:\n",
    "            images, labels = images.to(device), labels.to(device)\n",
    "            outputs = model(images)\n",
    "            _, predicted = torch.max(outputs, 1)\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted == labels).sum().item()\n",
    "    accuracy = correct / total\n",
    "    print(f\"Test Accuracy: {accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "98f5430d-1255-4661-ae72-33a87a874f80",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/4v/p_ltq8v135ggx_jn7q66xr680000gn/T/ipykernel_90760/1800892437.py:3: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  model.load_state_dict(torch.load(\"best_model.pth\"))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 0.8317\n"
     ]
    }
   ],
   "source": [
    "# Run evaluation\n",
    "evaluate_model(model, test_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "437b871c-8aa3-4bf9-b177-c67e5d3716e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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iIyMRNOmTTF//nxcvHgRV65cgZGREYCHK8zS09OxZcsWlJSUYPz48ejYsSOiox9f3XxUvR0OIyIiIi3V4GGHlfWhifPnz6Nnz57i5+DgYABAQEAAIiIi8M477yA/Px+TJ09GVlYWunTpgn379okJEABs374d06dPR+/evSGXyzFixAisX79e89BZCXq2sBJEUsFKED3r6qQSFJ8EMy0rQXm5OejdrvqVoKcJK0FEREQSpcvVYfURkyAiIiKpkngWVK9XhxERERHVFCtBREREEiX7+4+2fdRXTIKIiIgkSqaD1WFary7TIw6HERERkSSxEkRERCRREp8XzUoQERERSRMrQURERFIl8VIQkyAiIiKJkvrqMA6HERERkSSxEkRERCRRUl8izySIiIhIoiQ+JYjDYURERCRNrAQRERFJlcRLQUyCiIiIJIqrw4iIiIgkiJUgIiIiieLqMCIiIpIkiU8J4nAYERERSRMrQURERFIl8VIQkyAiIiKJ4uowIiIiIgliJYiIiEiiuDqMiIiIJEniU4I4HEZERETSxEoQERGRVEm8FMQkiIiISKK4OoyIiIhIglgJIiIikiiuDiMiIiJJkviUIA6HERERkTSxEkRERCRVEi8FMQkiIiKSKK4OIyIiIpIgVoKIiIikSgerw+pxIYhJEBERkVRJfEoQh8OIiIhImlgJIiIikiqJl4JYCSIiIpIomY7+aCI0NBQymUxte/7558XjhYWFCAoKgo2NDczMzDBixAikp6fr+tYBMAkiIiKiOta6dWukpqaK28mTJ8VjM2fOxPfff49du3bh+PHjSElJwfDhw2slDg6HERERSZS+3h3WoEEDqFSqCvuzs7OxdetWREdHo1evXgCAbdu2oVWrVjhz5gw6d+6sXbCPYCWIiIhIomQ62gAgJydHbSsqKqryutevX4ejoyOaNWuGsWPHIikpCQAQFxeHkpIS+Pr6im2ff/55NGnSBLGxsTq884eYBBEREZHWnJycYGFhIW7h4eGVtvPy8kJERAT27duHzZs349atW+jatStyc3ORlpYGQ0NDWFpaqp1jb2+PtLQ0ncfM4TAiIiKp0uHqsOTkZCiVSnG3QqGotHn//v3Fv7dt2xZeXl5wdnbGzp07YWxsrGUwmmEliIiISKJ0uTpMqVSqbVUlQY+ytLREy5YtcePGDahUKhQXFyMrK0ut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",
      "text/plain": [
       "<Figure size 600x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "def plot_confusion_matrix(model, dataloader, device):\n",
    "    model.eval()\n",
    "    all_preds = []\n",
    "    all_labels = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for images, labels in dataloader:\n",
    "            images, labels = images.to(device), labels.to(device)\n",
    "            outputs = model(images)\n",
    "            _, preds = torch.max(outputs, 1)\n",
    "            all_preds.extend(preds.cpu().numpy())\n",
    "            all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "    cm = confusion_matrix(all_labels, all_preds)\n",
    "\n",
    "    plt.figure(figsize=(6, 5))\n",
    "    plt.imshow(cm, interpolation=\"nearest\", cmap=plt.cm.Blues)\n",
    "    plt.colorbar()\n",
    "    plt.xticks([0, 1], ['Normal', 'Pneumonia'])\n",
    "    plt.yticks([0, 1], ['Normal', 'Pneumonia'])\n",
    "\n",
    "    for i in range(2):\n",
    "        for j in range(2):\n",
    "            plt.text(j, i, cm[i, j], ha=\"center\", va=\"center\", color=\"white\" if cm[i, j] > cm.max() / 2 else \"black\")\n",
    "\n",
    "    plt.xlabel(\"Predicted Label\")\n",
    "    plt.ylabel(\"True Label\")\n",
    "    plt.title(\"Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "# Call this function after evaluating the model\n",
    "plot_confusion_matrix(model, test_loader, device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9df0dff-5422-41f7-8681-d9270356177a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
